import React, { useState, useRef } from 'react';
import { View, TextInput, TouchableOpacity, Text, StyleSheet, Modal } from 'react-native';
import DatePicker from 'react-native-modern-datepicker';
import Icon from 'react-native-vector-icons/FontAwesome'; // Debes importar el icono que desees usar

export default function App() {
  const [date, setDate] = useState('');
  const [modalVisible, setModalVisible] = useState(false);
  const dateTextInputRef = useRef();

  const openDatePicker = () => {
    setModalVisible(true);
  };

  const clearDate = () => {
    setDate('');
    dateTextInputRef.current.clear();
  };

  return (
    <View style={stylesI.container}>
      <View style={stylesI.dateInputContainer}>
        <TextInput
          ref={dateTextInputRef}
          value={date}
          style={stylesI.dateInput}
          placeholder="Selecciona una fecha"
        />
        <TouchableOpacity style={stylesI.iconContainer} onPress={openDatePicker}>
          <Icon name="calendar" size={20} color="blue" />{/* Icono de calendario */}
        </TouchableOpacity>
        <TouchableOpacity style={stylesI.iconContainer} onPress={clearDate}>
          <Icon name="times" size={20} color="red" />{/* Icono de borrar */}
        </TouchableOpacity>
      </View>

      <Modal
        animationType="slide"
        transparent={false}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={stylesI.modalContainer}>
          <DatePicker
            options={{
              mainColor: '#f0f0f0',
              textColor: 'black',
              textHeaderColor: 'black',
              borderColor: 'rgba(122, 146, 165, 0.1)',
            }}
            onSelectedChange={(selectedDate) => {
              setDate(selectedDate);
              setModalVisible(false);
            }}
            current={date || '2023-10-10'}
            selected={date}
            mode="calendar"
          />
        </View>
      </Modal>
    </View>
  );
}

const stylesI = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 10,
  },
  dateInputContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 15,
    borderRadius: 15,
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  dateInput: {
    flex: 1,
  },
  iconContainer: {
    padding: 10,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
  },
});








import React, { useState, useRef, useEffect } from 'react';
import { View, Text, TouchableOpacity, ScrollView, Button, TextInput, StyleSheet } from 'react-native';
import styles from '../styles/styleActiveInactive';
import stylesHead from '../styles/stylesHead';
import CenterProjects from '../components/projectsScreen/CenterProjects';
import ActivosProjects from '../components/projectsScreen/ActiveProjects';
import InactivosProjects from '../components/projectsScreen/InactiveProjects';
import { createStackNavigator } from '@react-navigation/stack';
import CustomAlertModal from '../components/Alerts';
import { useModalFunctions } from '../components/Functions-Alerts';
import Modal from 'react-native-modal';
import DatePicker from 'react-native-modern-datepicker';
import Icon from 'react-native-vector-icons/FontAwesome';
import axios from 'axios';

const ProjectsScreen = ({ navigation }) => {
  const [proyectos, setProyectos] = useState([]);

  useEffect(() => {
  // Realiza la solicitud a la API y actualiza el estado 'proyectos'
      fetch('http://localhost:3000/api/projects')
      .then((response) => response.json())
      .then((data) => {
        console.log(data);
      })
      .catch((error) => {
        console.error('Error al obtener los proyectos:', error);
      });

    
}, []);


  const {
    errorModalVisible, infoModalVisible, successModalVisible, questionModalVisible,
    showErrorAlert, showInfoAlert, showSuccessAlert, showQuestionAlert,
    closeErrorAlert, closeInfoAlert, closeSuccessAlert, closeQuestionAlert,
  } = useModalFunctions();

  const Stack = createStackNavigator();

  const [Modal2Visible, setModal2Visible] = useState(false);
  const [titulo, setTitulo] = useState("");
  const [fechaInicio, setFechaInicio] = useState(""); // Estado para fecha de inicio
  const [fechaFinalizacion, setFechaFinalizacion] = useState(""); // Estado para fecha de finalización
  const [descripcion, setDescripcion] = useState("");

  const [dateInicio, setDateInicio] = useState(''); // Estado para la fecha de inicio
  const [dateFinalizacion, setDateFinalizacion] = useState(''); // Estado para la fecha de finalización

  const toggleModal2 = () => {
    setModal2Visible(!Modal2Visible);
  };

  const guardarProyecto = () => {
    console.log("Título: ", titulo);
    console.log("Fecha Inicio: ", fechaInicio);
    console.log("Fecha Finalización: ", fechaFinalizacion);
    console.log("Descripción: ", descripcion);
    toggleModal2();
    showSuccessAlert();
  };

  const [modalVisibleInicio, setModalVisibleInicio] = useState(false);
  const [modalVisibleFinalizacion, setModalVisibleFinalizacion] = useState(false);
  const dateTextInputRefInicio = useRef();
  const dateTextInputRefFinalizacion = useRef();

  const openDatePickerInicio = () => {
    setModalVisibleInicio(true);
  };

  const openDatePickerFinalizacion = () => {
    setModalVisibleFinalizacion(true);
  };

  const clearDateInicio = () => {
    setDateInicio('');
    dateTextInputRefInicio.current.clear();
  };

  const clearDateFinalizacion = () => {
    setDateFinalizacion('');
    dateTextInputRefFinalizacion.current.clear();
  };

  return (
    <ScrollView>
      <View style={stylesHead.container}>
        <View style={stylesHead.headProjects}>
          <View style={stylesHead.options}>
            <TouchableOpacity style={stylesHead.button} onPress={() => navigation.navigate('Tasks')}>
              <Text style={stylesHead.buttonText}>Tareas Individuales</Text>
            </TouchableOpacity>
            <TouchableOpacity style={stylesHead.addButton} onPress={toggleModal2}>
              <Text style={stylesHead.addButtonText}>+</Text>
            </TouchableOpacity>
            <Modal
              isVisible={Modal2Visible}
              animationIn="slideInUp"
              animationOut="slideOutDown"
              backdropOpacity={0.5}
              onBackdropPress={toggleModal2}
              style={{ justifyContent: "center", alignItems: "center", margin: 0 }}
            >
              <View style={{ width: '80%', backgroundColor: 'white', borderRadius: 10, padding: 10 }}>
                <Text style={{ color: 'blue', fontWeight: 'bold', fontSize: 20, margin: 10 }}>Crear Proyecto</Text>
                <View style={styles.opcionesInput}>
                  <Text style={styles.textInput}>Titulo</Text>
                  <TextInput
                    placeholder="Ingrese el título"
                    onChangeText={(text) => {
                      setTitulo(text);
                    }}
                    style={styles.input}
                  />
                </View>
                <View style={styles.opcionesInput}>
                  <Text style={styles.textInput}>Fecha Inicio</Text>
                  <View style={stylesI.dateInputContainer}>
                    <TextInput
                      ref={dateTextInputRefInicio}
                      value={dateInicio}
                      style={stylesI.dateInput}
                      placeholder="Selecciona una fecha"
                    />
                    <TouchableOpacity style={stylesI.iconContainer} onPress={openDatePickerInicio}>
                      <Icon name="calendar" size={20} color="blue" />
                    </TouchableOpacity>
                    <TouchableOpacity style={stylesI.iconContainer} onPress={clearDateInicio}>
                      <Icon name="times" size={20} color="red" />
                    </TouchableOpacity>
                  </View>
                  <Modal
                    animationType="slide"
                    transparent={false}
                    visible={modalVisibleInicio}
                    onRequestClose={() => setModalVisibleInicio(false)}
                  >
                    <View
                      style={{
                        flex: 1,
                        justifyContent: 'center',
                        alignItems: 'center',
                        backgroundColor: 'rgba(0, 0, 0, 0.7)',
                      }}
                    >
                      <View
                        style={{
                          width: '80%',
                          backgroundColor: 'white',
                          borderRadius: 10,
                          padding: 20,
                          shadowColor: 'black',
                          shadowOffset: { width: 0, height: 2 },
                          shadowOpacity: 0.25,
                          shadowRadius: 3.84,
                          elevation: 5,
                        }}
                      >
                        <DatePicker
                          options={{
                            mainColor: '#f0f0f0',
                            textColor: 'black',
                            textHeaderColor: 'black',
                            borderColor: 'rgba(122, 146, 165, 0.1)',
                          }}
                          onSelectedChange={(selectedDate) => {
                            setFechaInicio(selectedDate);
                            setDateInicio(selectedDate);
                            setModalVisibleInicio(false);
                          }}
                          current={dateInicio || '2023-10-10'}
                          selected={dateInicio}
                          mode="calendar"
                        />
                      </View>
                    </View>
                  </Modal>
                </View>
                <View style={styles.opcionesInput}>
                  <Text style={styles.textInput}>Fecha Finalizacion</Text>
                  <View style={stylesI.dateInputContainer}>
                    <TextInput
                      ref={dateTextInputRefFinalizacion}
                      value={dateFinalizacion}
                      style={stylesI.dateInput}
                      placeholder="Selecciona una fecha"
                    />
                    <TouchableOpacity style={stylesI.iconContainer} onPress={openDatePickerFinalizacion}>
                      <Icon name="calendar" size={20} color="blue" />
                    </TouchableOpacity>
                    <TouchableOpacity style={stylesI.iconContainer} onPress={clearDateFinalizacion}>
                      <Icon name="times" size={20} color="red" />
                    </TouchableOpacity>
                  </View>
                  <Modal
                    animationType="slide"
                    transparent={false}
                    visible={modalVisibleFinalizacion}
                    onRequestClose={() => setModalVisibleFinalizacion(false)}
                  >
                    <View
                      style={{
                        flex: 1,
                        justifyContent: 'center',
                        alignItems: 'center',
                        backgroundColor: 'rgba(0, 0, 0, 0.7)',
                      }}
                    >
                      <View
                        style={{
                          width: '80%',
                          backgroundColor: 'white',
                          borderRadius: 10,
                          padding: 20,
                          shadowColor: 'black',
                          shadowOffset: { width: 0, height: 2 },
                          shadowOpacity: 0.25,
                          shadowRadius: 3.84,
                          elevation: 5,
                        }}
                      >
                        <DatePicker
                          options={{
                            mainColor: '#f0f0f0',
                            textColor: 'black',
                            textHeaderColor: 'black',
                            borderColor: 'rgba(122, 146, 165, 0.1)',
                          }}
                          onSelectedChange={(selectedDate) => {
                            setFechaFinalizacion(selectedDate);
                            setDateFinalizacion(selectedDate);
                            setModalVisibleFinalizacion(false);
                          }}
                          current={dateFinalizacion || '2023-10-10'}
                          selected={dateFinalizacion}
                          mode="calendar"
                        />
                      </View>
                    </View>
                  </Modal>
                </View>
                <View style={styles.opcionesInput}>
                  <Text style={styles.textInput}>Descripción</Text>
                  <TextInput
                    placeholder="Ingrese la descripción"
                    onChangeText={(text) => {
                      setDescripcion(text);
                    }}
                    style={styles.input}
                  />
                  <Button title="Guardar" onPress={guardarProyecto} />
                </View>
              </View>
            </Modal>
          </View>
        </View>
        <CustomAlertModal
          isVisible={successModalVisible}
          type="success"
          message="Operación exitosa."
          onClose={closeSuccessAlert}
        />
        <CenterProjects />
        <ActivosProjects proyectos={proyectos.filter(proyecto => proyecto.estatus === 'Activo')} />
        <InactivosProjects proyectos={proyectos.filter(proyecto => proyecto.estatus === 'Inactivo')} />
      </View>
    </ScrollView>
  );
};

export default ProjectsScreen;

const stylesI = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  dateInputContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingLeft: 15,
    borderRadius: 15,
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  dateInput: {
    flex: 1,
  },
  iconContainer: {
    padding: 10,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
  },
});
